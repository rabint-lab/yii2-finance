<?php

namespace rabint\finance\models;

use Yii;

/**
 * This is the model class for table "finance_wallet".
 *
 * @property integer $id
 * @property integer $created_at
 * @property integer $user_id
 * @property integer $amount
 * @property integer $w_num
 * @property integer $transactioner
 * @property string $transactioner_ip
 * @property integer $bank_transaction_id
 * @property string $description
 * @property string $metadata
 */
class FinanceWallet extends \yii\db\ActiveRecord
{

    public $change_action;

    public static function wNums()
    {
        return [
            0 => ['title' => Yii::t('app', 'موجودی اصلی'), 'class' => 'primary',],
            1 => ['title' => Yii::t('app', 'اعتبار خرید'), 'class' => 'success',],
        ];
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'finance_wallet';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['created_at', 'user_id', 'amount', 'transactioner', 'transactioner_ip', 'description'], 'required'],
            [['created_at', 'user_id', 'w_num', 'transactioner', 'change_action'], 'integer'],
            [['amount'], 'string'],
            [['transactioner_ip', 'description', 'metadata', 'bank_transaction_id'], 'string', 'max' => 255]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'created_at' => 'زمان تراکنش',
            'user_id' => 'ذینفع',
            'amount' => 'مبلغ',
            'w_num' => 'شماره کیف پول',
            'transactioner' => 'انجام دهنده',
            'transactioner_ip' => 'Ip انجام دهنده',
            'bank_transaction_id' => 'شناسه تراکنش بانکی',
            'description' => 'توضیحات',
            'metadata' => 'اطلاعات متا',
        ];
    }
//
//    public function beforeSave($insert)
//    {
//        if (!empty($this->amount)) {
//            $this->amount = str_replace('٫', '', $this->amount);
//        }
//        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
//    }

//    public function behaviors()
//    {
//        return [
//            [
//                'class' => \yii\behaviors\TimestampBehavior::class,
//                'createdAtAttribute' => 'created_at',
//                'updatedAtAttribute' => false,
//                'value' => time(),
//            ],
//            [
//                'class' => \yii\behaviors\BlameableBehavior::class,
//                'createdByAttribute' => 'creator_id',
//                'updatedByAttribute' => false,
//            ],
//        ];
//    }
    /**
     * اعتبار این کاربر که معادل موجودی حساب بعلاوه بر اعتباراین کاربر
     * @param type $user_id
     * @return int
     */
    static function credit($user_id)
    {
        $profile = \rabint\helpers\user::profile($user_id);
        $credit = $profile->credit ?? 0;
        $userCash = self::cash($user_id);
        return $credit + $userCash;
    }

    /**
     * موجودی حساب کاربر
     * @param type $user_id
     * @return int
     */
    static function cash($user_id, $w_num = null)
    {
        if ($w_num === null) {
            $cash = FinanceWallet::find()->where(['user_id' => $user_id])->sum('amount');
        } else {
            $cash = FinanceWallet::find()->where(['user_id' => $user_id, 'w_num' => $w_num])->sum('amount');
        }
        return intval($cash);
    }

    static function inc($user_id, $amount, $transactioner = '', $transactioner_ip = '::1', $description = '', $metadata = '', $bank_tid = null, $w_num = 0)
    {
        $wallet = new FinanceWallet();
        $wallet->created_at = time();
        $wallet->user_id = $user_id;
        $wallet->amount = $amount;
        $wallet->w_num = $w_num;
        $wallet->transactioner = $transactioner;
        $wallet->transactioner_ip = $transactioner_ip;
        $wallet->bank_transaction_id = $bank_tid;
        $wallet->description = $description;
        $wallet->metadata = json_encode($metadata);
        try {
            return ($wallet->save(false)) ? TRUE : FALSE;
        } catch (\yii\db\IntegrityException $e) {
            return false;
        }
    }

    static function dec($user_id, $amount, $transactioner = '', $transactioner_ip = '', $description = '', $metadata = '', $bank_tid = null, $w_num = 0)
    {
        $userCredit = self::credit($user_id);
        if ($amount <= $userCredit) {
            $wallet = new FinanceWallet();
            $wallet->created_at = time();
            $wallet->user_id = $user_id;
            $wallet->amount = -1 * $amount;
            $wallet->w_num = $w_num;
            $wallet->transactioner = $transactioner;
            $wallet->transactioner_ip = $transactioner_ip;
            $wallet->bank_transaction_id = $bank_tid;
            $wallet->description = $description;
            $wallet->metadata = json_encode($metadata);
            if ($wallet->save(false)) {
                if (self::credit($user_id) >= 0) {
                    return TRUE;
                } else {
                    $wallet->delete();
                }
            }
        }
        return FALSE;
    }

    static function validateAdditionalRows($aditionalData)
    {
        $err = 0;
        foreach ((array)$aditionalData as $row) {
            if (!isset($row['amount'])) {
                $err++;
            }
            if (!isset($row['description'])) {
                $err++;
            }
            if (!isset($row['user_id'])) {
                $err++;
            }
        }
        if ($err) {
            return false;
        }
        return true;
    }

    static function balancingPay($user_id, $aditionalData, $transactioner = '', $transactioner_ip = '')
    {
        $allRows = [];
        foreach ((array)$aditionalData as $row) {
            if (!isset($row['amount'])) {
                continue;
            }
            $r_user_id = isset($row['user_id']) ? $row['user_id'] : $user_id;
            $allRows[] = [
                time(),
                $r_user_id,
                $row['amount'],
                $transactioner,
                $transactioner_ip,
                $row['description'],
                json_encode($row['metadata']),
            ];
        }

        if (empty($allRows)) {
            return false;
        }
        $tableName = 'finance_wallet';
        $connection = Yii::$app->db;
        $transaction = $connection->beginTransaction();
        try {
            $connection->createCommand()->batchInsert(
                $tableName, ['created_at', 'user_id', 'amount', 'transactioner', 'transactioner_ip', 'description', 'metadata'], $allRows
            )->execute();
            $transaction->commit();
            return true;
        } catch (\Exception $e) {
            $transaction->rollBack();
            return false;
        }
    }

    public function getTransactionerUser()
    {
        return $this->hasOne(\rabint\user\models\User::className(), ['id' => 'transactioner']);
    }

    public function getUser()
    {
        return $this->hasOne(\rabint\user\models\User::className(), ['id' => 'user_id']);
    }

    static function incWithCredit($user_id, $amount, $credit_percentage, $transactioner = '', $transactioner_ip = '::1', $description = '', $metadata = '', $bank_tid = null)
    {
        // شروع تراکنش
        $transaction = \Yii::$app->db->beginTransaction();
        try {
            // شارژ کیف اصلی
            $mainWalletSuccess = self::inc($user_id, $amount, $transactioner, $transactioner_ip, $description, $metadata, $bank_tid, 0);
            if (!$mainWalletSuccess) {
                throw new \Exception('Failed to charge main wallet.');
            }

            // محاسبه مبلغ اعتبار
            $creditAmount = $amount * ($credit_percentage / 100);

            // شارژ کیف اعتباری
            $creditWalletSuccess = self::inc($user_id, $creditAmount, $transactioner, $transactioner_ip, $description, $metadata, $bank_tid . "|C", 1);
            if (!$creditWalletSuccess) {
                throw new \Exception('Failed to charge credit wallet.');
            }

            // اگر همه چیز درست بود، تراکنش را commit کن
            $transaction->commit();
            return true;
        } catch (\Exception $e) {
            // اگر خطایی رخ داد، تراکنش را rollback کن
            $transaction->rollBack();
            \Yii::error('Transaction failed: ' . $e->getMessage());
            return false;
        }
    }

    static function decWithCredit($user_id, $amount, $transactioner = '', $transactioner_ip = '', $description = '', $metadata = '', $bank_tid = null)
    {
        // شروع تراکنش
        $transaction = \Yii::$app->db->beginTransaction();
        try {
            // دریافت موجودی کیف اصلی
            $mainCredit = self::credit($user_id, 0);

            // اگر موجودی کیف اصلی کافی باشد
            if ($mainCredit >= $amount) {
                $mainWalletSuccess = self::dec($user_id, $amount, $transactioner, $transactioner_ip, $description, $metadata, $bank_tid, 0);
                if (!$mainWalletSuccess) {
                    throw new \Exception('Failed to deduct from main wallet.');
                }
            } else {
                // اگر موجودی کیف اصلی کافی نباشد، از کیف اعتباری نیز کم می‌کنیم
                $remainingAmount = $amount - $mainCredit;

                // کسر از کیف اصلی
                $mainWalletSuccess = self::dec($user_id, $mainCredit, $transactioner, $transactioner_ip, $description, $metadata, $bank_tid, 0);
                if (!$mainWalletSuccess) {
                    throw new \Exception('Failed to deduct from main wallet.');
                }

                // کسر از کیف اعتباری
                $creditWalletSuccess = self::dec($user_id, $remainingAmount, $transactioner, $transactioner_ip, $description, $metadata, $bank_tid . "|C", 1);
                if (!$creditWalletSuccess) {
                    throw new \Exception('Failed to deduct from credit wallet.');
                }
            }

            // اگر همه چیز درست بود، تراکنش را commit کن
            $transaction->commit();
            return true;
        } catch (\Exception $e) {
            // اگر خطایی رخ داد، تراکنش را rollback کن
            $transaction->rollBack();
            \Yii::error('Transaction failed: ' . $e->getMessage());
            return false;
        }
    }

}
